require_relative 'lib/extract_overall_cost_and_emissions'
require 'json'

# FIXME: DOCUMENT THIS!

$this_directory = File.dirname(__FILE__)
extract_totals = ExtractOverallCostAndEmissions.new

# No arguments given, then just use some test data
if ARGV.length == 0
  ARGV[0] = File.join($this_directory, 'test', 'test.tsv')
  ARGV[1] = File.join($this_directory, 'test', 'test.gdx')
  ARGV[2] = File.join($this_directory, 'test', 'test2.gdx')
end

# Either starts with a tsv file generated by times-batch-run/create-list-of-cases.rb
# Or goes straight into a list of gdx files
files = {}
ARGV.each.with_index do |file, i|
  unless File.exist?(file)
    puts "Can't find #{file} (#{File.expand_path(file)})"
    exit
  end
  
  case File.extname(file)
  when /\.gdx/i
    files[File.basename(file, '.*')] = file    
  when /\.tsv/i
    scenarios_in_cases = IO.readlines(file)
      .join
      .split(/[\n\r]+/) # Deal with unix and windows line endings
      .map { |r| r.split("\t") } # Tab separated
    
    titles = scenarios_in_cases.shift # Remove the title row
  
    scenarios_in_cases.each do|row|
      row.map!.with_index { |t,i| t =~ /NIL/i ? "default_#{titles[i].gsub(" ","_")}" : t  } # The NILs aren't very informative
      extract_totals.scenarios_in_case[row.shift] = row
    end
  else
    puts "Sorry, I don't recognise the format of #{file}"
    exit
  end
end


extract_totals.cases = files

data = extract_totals.extract_overall_cost_and_emissions

list_of_cases = []
data_directory = File.join($this_directory, 'data')

data.each do |d|
  case_name = d[:name]
  list_of_cases.push(case_name)
  File.open(File.join(data_directory, "#{case_name}.json"), 'w') do |f|
    f.puts d.to_json
  end
end  

File.open(File.join(data_directory, "index.txt"), 'w') { |f| f.puts list_of_cases.join("\n") }